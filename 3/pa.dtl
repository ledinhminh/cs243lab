# CS243 Homework 5

# This file implements a basic context-insensitive pointer analysis.
# Its outputs are the following relations:
#
#   vP(v, h)           - variable 'v' may point to heap object 'h'
#   hP(ha, field, hb)  - ha.field (a field in 'ha') may point to heap object 'hb'
#   IE(invoke, target) - invocation site 'invoke' calls method 'target'

### Based upon:
### Java context-insensitive inclusion-based pointer analysis
### Author: John Whaley

.basedir "results"

### Domains

.include "fielddomains.pa"


# You can ignore the line below (found by findbestorder):
.bddvarorder N0_F0_I0_M1_M0_V1_V0_T0_Z0_T1_H0_H1


###### Relations

vP0 (v:V0, h:H0) input
A (dest:V0, source:V1) input
hP0 (ha:H0, field:F0, hb:H1) input
S (base:V0, field:F0, src:V1) input
L (base:V0, field:F0, dest:V1) input
vT (var:V0, type:T0) input
hT (heap:H0, type:T1) input
aT (type:T0, type:T1) input
vPfilter (v:V0, h:H0)
actual (invoke:I0, num:Z0, actualparam:V1) input
formal (method:M0, num:Z0, formalparam:V0) input
Mret (method:M0, v:V1) input
Mthr (method:M0, v:V1) input
Iret (invoke:I0, v:V0) input
Ithr (invoke:I0, v:V0) input
IE0 (invoke:I0, target:M0) input
vP (v:V0, h:H0) outputtuples
hP (ha:H0, field:F0, hb:H1) outputtuples
IE (invoke:I0, target:M0) outputtuples


###### Rules

vP(v,h) :- vP0(v,h).
hP(h,f,h2) :- hP0(h,f,h2).
IE(i,m) :- IE0(i,m).
vPfilter(v,h) :- vT(v,tv), aT(tv,th), hT(h,th).
vP(v1,h) :- A(v1,v2), vP(v2,h), vPfilter(v1,h).
hP(h1,f,h2) :- S(v1,f,v2), vP(v1,h1), vP(v2,h2).
vP(v2,h2) :- L(v1,f,v2), vP(v1,h1), hP(h1,f,h2), vPfilter(v2,h2). split
A(v1,v2) :- formal(m,z,v1), IE(i,m), actual(i,z,v2).
A(v2,v1) :- Mret(m,v1), IE(i,m), Iret(i,v2).
A(v2,v1) :- Mthr(m,v1), IE(i,m), Ithr(i,v2).

